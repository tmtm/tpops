#!/usr/local/bin/ruby
# $Id: tpops-pipe,v 1.5 2002/04/21 05:31:48 tommy Exp $

require 'mysql'

EX_OK = 0
EX_USAGE = 64
EX_NOUSER = 67
EX_CANTCREAT = 73
EX_TEMPFAIL = 75

ScriptDir = File::dirname($0) + '/'
load ScriptDir+'tpops.conf'

if ARGV.size < 1 then
  $stderr.puts "usage: tpops-store mail_address [mail_address...]"
  exit EX_USAGE
end

def store(msg)
  msg.gsub!(/\r\n/, "\n")
  size = msg.gsub(/\n/, "\r\n").size
  r = @my.query("select sum(size) from msg where uid=#{@uid}").fetch_row[0]
  if r and @quota > 0 and r.to_i + size > @quota then
    $stderr.puts "quota limit exceeded"
    return EX_CANTCREAT
  end
  i = msg.index("\n\n")
  if i then
    h = msg[0, i+1]
    b = msg[i+2 .. -1]
  else
    h = msg
    b = ''
  end
  @my.query("insert into msg (uid,header,body,size,timestamp) values (#{@uid},'#{@my.quote h}','#{@my.quote b}',#{size},now())")
  nil
end

exit_code = EX_OK
begin 

  msg = $stdin.read
  @my = Mysql::new(MySQL_Server, MySQL_User, MySQL_Pass, MySQL_DB)
  ARGV.each do |mail|
    res = @my.query("select uid,quota from user where mail='#{@my.quote mail}'")
    if res.num_rows == 0 then
      puts "#{mail}: unknown user"
      exit_code = EX_NOUSER
      next
    end
    uid, quota = res.fetch_row
    @uid = uid.to_i
    @quota = quota.to_i
    if ret = store(msg) then
      exit_code = ret
    end
  end
  @my.close

rescue
  bt = $!.backtrace
  $stderr.puts "#{bt.shift}: #{$!.message} (#{$!.type})"
  bt.each do |l|
    $stderr.puts "\tfrom #{l}"
  end
  exit EX_TEMPFAIL
end

exit exit_code
